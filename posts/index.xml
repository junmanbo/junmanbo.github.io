<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Jun's Blog</title><link>https://junmanbo.github.io/posts/</link><description>Recent content in Posts on Jun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 04 May 2025 15:54:13 +0900</lastBuildDate><atom:link href="https://junmanbo.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>기본 서버 보안 설정</title><link>https://junmanbo.github.io/posts/basic-server-sec/</link><pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate><guid>https://junmanbo.github.io/posts/basic-server-sec/</guid><description>서비스를 하다 보니 내 서버를 누가 털어가지 않을까 항상 걱정된다.
그래서 기초적인 보안 설정으로 서버에 접속하는걸 막아보고자 한다.
접속 log 확인 우선 누가 실제로 접속을 시도했는지 확인해 본다.
SSH 로그 확인 /var/log/auth.log 에서 서버에 접속한 기록들을 볼 수 있다. 접속시도한 내용 확인 grep sshd.*Did /var/log/auth.log | less 접속시도 했으나 실패한 내용 확인 grep sshd.Failed /var/log/auth.log | less 그런데 이미 누가 접속을 성공해서 내 서버를 마음대로 쓰고 있을 수 있기 때문에 실패한 걸로만 보고 방심하면 안 된다.</description></item><item><title>서버 네트워크 이중화 본딩 설정(RHEL9)</title><link>https://junmanbo.github.io/posts/server-bond/</link><pubDate>Sun, 04 May 2025 15:54:13 +0900</pubDate><guid>https://junmanbo.github.io/posts/server-bond/</guid><description>1. RHEL 9 서버 신규 구축 시 네트워크 본딩 구성 방법 (active-backup 구성) 안녕하세요 오늘은 **RHEL 9 서버를 새로 구축하면서 네트워크 본딩(Network Bonding)**을 설정했던 과정을 공유해보려고 합니다. 서버에 네트워크 카드가 2장이 장착되어 있고, 이를 하나의 논리적 인터페이스로 묶어 고가용성과 이중화를 구성하는 게 목표였습니다.
특히 저는 active-backup 모드를 사용하면서 primary_reselect=failure 옵션을 설정해, 장애 복구 시 불필요한 네트워크 스위칭을 방지하고 싶었습니다. 그 과정과 설정 방법을 단계별로 정리해볼게요.
네트워크 본딩은 두 개 이상의 물리적 네트워크 인터페이스를 하나의 논리적 인터페이스로 묶어주는 기술입니다.</description></item><item><title>SSH 원리 및 서버 마이그레이션</title><link>https://junmanbo.github.io/posts/ssh-server-migration/</link><pubDate>Sat, 03 May 2025 10:52:13 +0900</pubDate><guid>https://junmanbo.github.io/posts/ssh-server-migration/</guid><description>SSH 접속 원리 및 서버 마이그레이션 서버 운영을 하다 보면 SSH로 서버에 접속해 작업을 수행하는 일이 필수적입니다. 하지만 서버를 업그레이드하거나 이전하는 과정에서는 SSH 관련 문제가 예상치 못하게 발생할 수 있습니다. 여기서는 SSH의 개념과 동작 원리, 그리고 서버 마이그레이션 시 발생할 수 있는 SSH 관련 문제를 정리해보겠습니다.
1. SSH란 무엇인가? SSH(Secure Shell)는 네트워크 상에서 다른 컴퓨터(서버)에 암호화된 연결을 통해 안전하게 접속할 수 있도록 해주는 프로토콜입니다. 주로 리눅스 서버 관리에 많이 사용되며, 원격에서 명령어를 실행하거나 파일을 전송할 때 사용됩니다.</description></item><item><title>Network Topology</title><link>https://junmanbo.github.io/posts/network-topology/</link><pubDate>Sun, 16 Feb 2025 21:46:13 +0900</pubDate><guid>https://junmanbo.github.io/posts/network-topology/</guid><description>네트워크 구성 방식에는 여러 가지가 있으며, 각 방식은 고유한 장단점을 가지고 있습니다. 주요 네트워크 구성 방식과 그들의 장단점을 그래프와 함께 설명드릴게요.
1. 스타형 (Star Topology) +----+ |Hub | +--+-+ | +------+------+ | | | +---+ +---+ +---+ |PC1| |PC2| |PC3| +---+ +---+ +---+ 장점:
중앙 허브 또는 스위치를 통해 모든 노드가 연결되어 있어 관리가 용이합니다. 중앙 장치에 문제가 없는 한 각 노드의 장애가 전체 네트워크에 영향을 미치지 않습니다. 새로운 장치를 추가하거나 제거하는 것이 간단합니다.</description></item><item><title>Nginx proxy 연결</title><link>https://junmanbo.github.io/posts/mattermost-nginx/</link><pubDate>Mon, 22 Jan 2024 16:41:55 +0900</pubDate><guid>https://junmanbo.github.io/posts/mattermost-nginx/</guid><description>Mattermost와 Nginx 연결 기본적으로 mattermost는 8065 port로 포팅된다.
여기에 도메인과 http를 연결하도록 config 파일을 만들어준다.
/etc/nginx/conf.d/mattermost.conf upstream에 server 주소와 server의 server_name의 도메인은 자신의 상황에 맞게 수정한다. upstream backend { server 10.10.10.2:8065; keepalive 32; } proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=mattermost_cache:10m max_size=3g inactive=120m use_temp_path=off; server { listen 80 default_server; server_name mattermost.example.com; return 301 https://$server_name$request_uri; } server { listen 443 ssl http2; server_name mattermost.example.com; http2_push_preload on; # Enable HTTP/2 Server Push ssl on; ssl_certificate /etc/letsencrypt/live/{domain-name}/fullchain.</description></item><item><title>Mattermost</title><link>https://junmanbo.github.io/posts/mattermost/</link><pubDate>Thu, 18 Jan 2024 15:46:28 +0900</pubDate><guid>https://junmanbo.github.io/posts/mattermost/</guid><description>Slack+Notion 을 하나로 Mattermost Mattermost 란? mattermost 는 slack 과 유사한 오픈소스 프로젝트로 채널별로 글을 남기거나 개인 메세지를 보낼 수 있다. 그리고 다양한 plugin을 지원한다. 여기에 focalboard라는 plugin이 있는데 이건 notion과 유사하다. 즉, slack 에서 쓰는 것 처럼 채널을 파서 관련된 프로젝트를 연결하여 문서화 할 수 있다. self-hosting이 가능하여 직접 구축하고 운영 가능하다. mattermost 설치 간단하게 도커로 배포할 수 있지만 여기서는 실행파일을 직접 받아와서 설치하는 방식으로 해본다. 최신 버전의 mattermost 프로그램 다운로드 + 압축 풀기 + 옮기기 + data 디렉토리 생성 wget https://releases.</description></item></channel></rss>