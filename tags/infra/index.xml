<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>infra on Jun&#39;s Blog</title>
        <link>https://junmanbo.github.io/tags/infra/</link>
        <description>Recent content in infra on Jun&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 20 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://junmanbo.github.io/tags/infra/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Server 보안 설정</title>
        <link>https://junmanbo.github.io/p/server-%EB%B3%B4%EC%95%88-%EC%84%A4%EC%A0%95/</link>
        <pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate>
        
        <guid>https://junmanbo.github.io/p/server-%EB%B3%B4%EC%95%88-%EC%84%A4%EC%A0%95/</guid>
        <description>&lt;p&gt;서비스를 하다 보니 내 서버를 누가 털어가지 않을까 항상 걱정이 된다.&lt;br&gt;
그래서 기초적인 보안 설정으로 서버에 들어오는걸 막아보고자 한다.&lt;/p&gt;
&lt;h3 id=&#34;접속-log-확인&#34;&gt;접속 Log 확인&lt;/h3&gt;
&lt;p&gt;우선 누가 실제로 접속을 시도했는지 확인해 봤다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SSH 로그를 확인&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/var/log/auth.log&lt;/code&gt;에서 서버에 접속한 기록들을 볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brute force로 접속 시도&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep sshd.*Did /var/log/auth.log | less&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;접속 시도 했으나 실패한 내용만&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grep sshd.Failed /var/log/auth.log | less&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그런데 이미 누가 접속을 성공해서 내 서버를 마음대로 쓰고 있을 수 있기 때문에 실패한 걸로만 보고 안심하면 안 된다.&lt;br&gt;
실제로 내 AWS EC2서버에 내 IP외의 수 많은 IP들이 찍혀 있어서 위치를 알아봤더니 미국, 유럽, 이란 등 다양하게 찍혀 있었다.&lt;/p&gt;
&lt;h3 id=&#34;외부에서-조치&#34;&gt;외부에서 조치&lt;/h3&gt;
&lt;h4 id=&#34;ssh-key-이용&#34;&gt;SSH Key 이용&lt;/h4&gt;
&lt;p&gt;비밀번호 보단 SSH Key를 이용하는게 좋다.&lt;br&gt;
&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; 에서 &lt;code&gt;password_authentication&lt;/code&gt;을 &lt;code&gt;no&lt;/code&gt;로 바꾼다. 비밀번호로 접근하는 걸 아예 막아버린다.&lt;br&gt;
그리고 키를 사용할 땐 키 관리를 잘해야 한다. 실수로 github에 같이 올려버리면 안 된다.&lt;br&gt;
key는 보통 &lt;code&gt;.ssh&lt;/code&gt; directory 안에 두고 권한은 700으로 키 권한은 400으로 설정하여 아무나 쓰지 못하도록 해 놓는다.&lt;/p&gt;
&lt;h4 id=&#34;보안-그룹-설정&#34;&gt;보안 그룹 설정&lt;/h4&gt;
&lt;p&gt;AWS, Azure, GCP 와 같은 클라우드 서비스를 사용한다면 인바운드를 내 IP만 허용한다. 집에서 서버를 돌린다면 공유기의 네트워크 규칙을 바꾸거나 포트포워딩 설정시 IP를 제한한다.&lt;br&gt;
하지만 허용된 IP에서만 접속할 수 있기 때문에 접속할 수 있는 장소가 한정적이게 된다. 작업은 집에서도 카페에서도 할 수 있기 때문에 IP가 매번 바뀐다. 그래서 VPN을 사용해서 해당 IP를 등록해 놓고 서버에 접속할 때는 VPN을 통해서만 접속한다. Lightsail에 WireGaurd를 돌리고 있는데 저렴하고 사용하기 편하다.&lt;/p&gt;
&lt;h3 id=&#34;내부에서-조치&#34;&gt;내부에서 조치&lt;/h3&gt;
&lt;h4 id=&#34;포트-변경&#34;&gt;포트 변경&lt;/h4&gt;
&lt;p&gt;SSH 포트를 바꿔준다. SSH포트는 기본적으로 22번이고 모두가 알기 때문에 공격 받기 쉽다.
체감상 포트만 바꿔줘도 반 정도 시도가 줄어드는 것 같다. &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;에서 바꿀 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;fail2ban&#34;&gt;fail2ban&lt;/h4&gt;
&lt;p&gt;다음으로 fail2ban을 사용하여 몇 번 이상 접속을 시도했다가 실패한 경우 Ban 시킨다. (서버를 재부팅하거나 fail2ban서비스를 재시작하면 Ban이 풀린다.)&lt;br&gt;
&lt;code&gt;/etc/fail2ban/jail.local&lt;/code&gt; 파일을 생성해서 원하는대로 설정하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[DEFAULT]

# 차단하지 않을 IP
ignoreip=127.0.0.1/8

# 차단 시간 (단위 분)
bantime=14400

# 최대 허용 횟수
maxretry=3

# 이 시간동안 maxretry횟수만큼 실패시 차단
findtie=43200

[sshd]
enabled=true
port=22
filter=sshd
logpath=/var/log/auth.log
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;현재 차단 상황 보기
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo fail2ban-client status sshd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;차단 IP 풀어주기
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo fail2ban-client set sshd unbanip 123.123.123.123&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;서비스 실행
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl enable fail2ban&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl start fail2ban&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;방화벽-설정&#34;&gt;방화벽 설정&lt;/h4&gt;
&lt;p&gt;iptables로 할 수 있지만 요즘엔 ufw가 기본으로 사용되어서(최신 ubuntu의 경우) ufw를 사용해서 방화벽을 설정했다.&lt;br&gt;
설정을 해 놓고 포트를 변경하면 다시 방화벽 설정을 바꿔줘야 하므로 미리 바꿀 포트는 바꾸고 설정하는게 편하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ufw를 활성화 시키기 전에 허용 포트를 설정해 준다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo ufw allow 22/tcp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo ufw enable&lt;/code&gt;
이렇게 하면 허용한 포트를 제외한 나머지는 모두 방화벽에 막힌다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;비슷하게 iptables로 더 구체적인 규칙을 만들고 설정할 수 있어서 외국 IP로 추정되는 것들을(특히 중국) 미리 등록해 놓고 차단 시키는 방법을 해봤지만 효과가 있는지는 잘 모르겠다.&lt;/p&gt;
&lt;p&gt;그리고 RDS나 다른 서비스를 이용하려면 EC2에서만 접속할 수 있도록 설정한 다음 SSH로 터널링을 해서 접속한다. 그러면 다른 서비스에도 접속하기 어렵지 않을까? 아니면 EC2가 털리면 다 털리는 거일 수도 있으려나.. 이 부분은 더 공부해서 정리해 봐야 겠다.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
